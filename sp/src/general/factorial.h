// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Code written by Gareth Pugh, sourced from mymathtables.com & thelearningpoint.net (very credible sources, I know!)
// Provides the solution to the factorial of an input number i.e. factorial 4 = 4! = 4x3x2x1 = 24.
// Code provided at the bottom gives an indication of how to utilise the array within the Source code.
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Array of strings (const char*) ranging from 0 to 120. (I thought I wouldn't go above 100!, but I got to 120! and decided to give up as converting ints to strings is BORING and TEDIOUS! Sorry :[ )
// Keep in mind that: INT_MAX   = 2^31 - 1 (unsigned is 2^32 - 1), maximum factorial that can be determined accurately is 12. (Same as long).
//					  LLONG_MAX = 2^63 - 1 (unsigned is 2^64 - 1), maximum factorial that can be determined accurately is 20. (Same as unsigned long long or uint64).
//					  FLT_MAX   ~ 3.4E38  (Maximum factorial that can be determined accurately from testing is 13).
//					  DBL_MAX   ~ 1.8E308 (Maximum factorial that can be determined accurately from testing is 21, same as long double).
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// While the float and double maximums are far greater than the solutions to 13! and 21!, the accuracy of the answers decreases as the input number increases.
// For example, 22! = 1,124,000,727,777,607,680,000 BUT a coded solution using a long double would suggest the answer is:
//                    1,124,000,727,777,607,700,000.000000 so there is a difference of 20,000 to the true solution. This is why I used the term 'accurately' above!
// As it turns out, the maximum number of characters for a const char* is...~4E9? I thought it was 127 or 255, so...I hope you can see why I stopped at 120! !!1!
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#ifndef FACTORIAL_H
#define FACTORIAL_H

// Array containing the solutions to the factorial of a given array element i.e. 4! -> cc_Factorials[4] = "24".
const char* cc_Factorials[] = {
	"1", // 0!
	"1", // 1!
	"2", // 2!
	"6", // 3!
	"24", // 4!
	"120", // 5!
	"720", // 6!
	"5,040", // 7!
	"40,320", // 8!
	"362,880", // 9!
	"3,628,800", // 10!
	"39,916,800", // 11!
	"479,001,600", // 12!
	"6,227,020,800", // 13!
	"87,178,291,200", // 14!
	"1,307,674,368,000", // 15!
	"20,922,789,888,000", // 16!
	"355,687,428,096,000", // 17!
	"6,402,373,705,728,000", // 18!
	"121,645,100,408,832,000", // 19!
	"2,432,902,008,176,640,000", // 20!
	"51,090,942,171,709,440,000", // 21!
	"1,124,000,727,777,607,680,000", // 22!
	"25,852,016,738,884,976,640,000", // 23!
	"620,448,401,733,239,439,360,000", // 24!
	"15,511,210,043,330,985,984,000,000", // 25!
	"403,291,461,126,605,635,584,000,000", // 26!
	"10,888,869,450,418,352,160,768,000,000", // 27!
	"304,888,344,611,713,860,501,504,000,000", // 28!
	"8,841,761,993,739,701,954,543,616,000,000", // 29!
	"265,252,859,812,191,058,636,308,480,000,000", // 30!
	"8,222,838,654,177,922,817,725,562,880,000,000", // 31!
	"263,130,836,933,693,530,167,218,012,160,000,000", // 32!
	"8,683,317,618,811,886,495,518,194,401,280,000,000", // 33!
	"295,232,799,039,604,140,847,618,609,643,520,000,000", // 34!
	"10,333,147,966,386,144,929,666,651,337,523,200,000,000", // 35!
	"371,993,326,789,901,217,467,999,448,150,835,200,000,000", // 36!
	"13,763,753,091,226,345,046,315,979,581,580,902,400,000,000", // 37!
	"523,022,617,466,601,111,760,007,224,100,074,291,200,000,000", // 38!
	"20,397,882,081,197,443,358,640,281,739,902,897,356,800,000,000", // 39!
	"815,915,283,247,897,734,345,611,269,596,115,894,272,000,000,000", // 40!
	"33,452,526,613,163,807,108,170,062,053,440,751,665,152,000,000,000", // 41!
	"1,405,006,117,752,879,898,543,142,606,244,511,569,936,384,000,000,000", // 42!
	"60,415,263,063,373,835,637,355,132,068,513,997,507,264,512,000,000,000", // 43!
	"2,658,271,574,788,448,768,043,625,811,014,615,890,319,638,528,000,000,000", // 44!
	"119,622,220,865,480,194,561,963,161,495,657,715,064,383,733,760,000,000,000", // 45!
	"5,502,622,159,812,088,949,850,305,428,800,254,892,961,651,752,960,000,000,000", // 46!
	"258,623,241,511,168,180,642,964,355,153,611,979,969,197,632,389,120,000,000,000", // 47!
	"12,413,915,592,536,072,670,862,289,047,373,375,038,521,486,354,677,760,000,000,000", // 48!
	"608,281,864,034,267,560,872,252,163,321,295,376,887,552,831,379,210,240,000,000,000", // 49!
	"30,414,093,201,713,378,043,612,608,166,064,768,844,377,641,568,960,512,000,000,000,000", // 50!
	"1,551,118,753,287,382,280,224,243,016,469,303,211,063,259,720,016,986,112,000,000,000,000", // 51!
	"80,658,175,170,943,878,571,660,636,856,403,766,975,289,505,440,883,277,824,000,000,000,000", // 52!
	"4,274,883,284,060,025,564,298,013,753,389,399,649,690,343,788,366,813,724,672,000,000,000,000", // 53!
	"230,843,697,339,241,380,472,092,742,683,027,581,083,278,564,571,807,941,132,288,000,000,000,000", // 54!
	"12,696,403,353,658,275,925,965,100,847,566,516,959,580,321,051,449,436,762,275,840,000,000,000,000", // 55!
	"710,998,587,804,863,451,854,045,647,463,724,949,736,497,978,881,168,458,687,447,040,000,000,000,000", // 56!
	"40,526,919,504,877,216,755,680,601,905,432,322,134,980,384,796,226,602,145,184,481,280,000,000,000,000", // 57!
	"2,350,561,331,282,878,571,829,474,910,515,074,683,828,862,318,181,142,924,420,699,914,240,000,000,000,000", // 58!
	"138,683,118,545,689,835,737,939,019,720,389,406,345,902,876,772,687,432,540,821,294,940,160,000,000,000,000", // 59!
	"8,320,987,112,741,390,144,276,341,183,223,364,380,754,172,606,361,245,952,449,277,696,409,600,000,000,000,000", // 60!
	"507,580,213,877,224,798,800,856,812,176,625,227,226,004,528,988,036,003,099,405,939,480,985,600,000,000,000,000", // 61!
	"31,469,973,260,387,937,525,653,122,354,950,764,088,012,280,797,258,232,192,163,168,247,821,107,200,000,000,000,000", // 62!
	"1,982,608,315,404,440,064,116,146,708,361,898,137,544,773,690,227,268,628,106,279,599,612,729,753,600,000,000,000,000", // 63!
	"126,886,932,185,884,164,103,433,389,335,161,480,802,865,516,174,545,192,198,801,894,375,214,704,230,400,000,000,000,000", // 64!
	"8,247,650,592,082,470,666,723,170,306,785,496,252,186,258,551,345,437,492,922,123,134,388,955,774,976,000,000,000,000,000", // 65!
	"544,344,939,077,443,064,003,729,240,247,842,752,644,293,064,388,798,874,532,860,126,869,671,081,148,416,000,000,000,000,000", // 66!
	"36,471,110,918,188,685,288,249,859,096,605,464,427,167,635,314,049,524,593,701,628,500,267,962,436,943,872,000,000,000,000,000", // 67!
	"2,480,035,542,436,830,599,600,990,418,569,171,581,047,399,201,355,367,672,371,710,738,018,221,445,712,183,296,000,000,000,000,000", // 68!
	"171,122,452,428,141,311,372,468,338,881,272,839,092,270,544,893,520,369,393,648,040,923,257,279,754,140,647,424,000,000,000,000,000", // 69!
	"11,978,571,669,969,891,796,072,783,721,689,098,736,458,938,142,546,425,857,555,362,864,628,009,582,789,845,319,680,000,000,000,000,000", // 70!
	"850,478,588,567,862,317,521,167,644,239,926,010,288,584,608,120,796,235,886,430,763,388,588,680,378,079,017,697,280,000,000,000,000,000", // 71!
	"61,234,458,376,886,086,861,524,070,385,274,672,740,778,091,784,697,328,983,823,014,963,978,384,987,221,689,274,204,160,000,000,000,000,000", // 72!
	"4,470,115,461,512,684,340,891,257,138,125,051,110,076,800,700,282,905,015,819,080,092,370,422,104,067,183,317,016,903,680,000,000,000,000,000", // 73!
	"330,788,544,151,938,641,225,953,028,221,253,782,145,683,251,820,934,971,170,611,926,835,411,235,700,971,565,459,250,872,320,000,000,000,000,000", // 74!
	"24,809,140,811,395,398,091,946,477,116,594,033,660,926,243,886,570,122,837,795,894,512,655,842,677,572,867,409,443,815,424,000,000,000,000,000,000", // 75!
	"1,885,494,701,666,050,254,987,932,260,861,146,558,230,394,535,379,329,335,672,487,982,961,844,043,495,537,923,117,729,972,224,000,000,000,000,000,000", // 76!
	"145,183,092,028,285,869,634,070,784,086,308,284,983,740,379,224,208,358,846,781,574,688,061,991,349,156,420,080,065,207,861,248,000,000,000,000,000,000", // 77!
	"11,324,281,178,206,297,831,457,521,158,732,046,228,731,749,579,488,251,990,048,962,825,668,835,325,234,200,766,245,086,213,177,344,000,000,000,000,000,000", // 78!
	"894,618,213,078,297,528,685,144,171,539,831,652,069,808,216,779,571,907,213,868,063,227,837,990,693,501,860,533,361,810,841,010,176,000,000,000,000,000,000", // 79!
	"71,569,457,046,263,802,294,811,533,723,186,532,165,584,657,342,365,752,577,109,445,058,227,039,255,480,148,842,668,944,867,280,814,080,000,000,000,000,000,000", // 80!
	"5,797,126,020,747,367,985,879,734,231,578,109,105,412,357,244,731,625,958,745,865,049,716,390,179,693,892,056,256,184,534,249,745,940,480,000,000,000,000,000,000", // 81!
	"475,364,333,701,284,174,842,138,206,989,404,946,643,813,294,067,993,328,617,160,934,076,743,994,734,899,148,613,007,131,808,479,167,119,360,000,000,000,000,000,000", // 82!
	"39,455,239,697,206,586,511,897,471,180,120,610,571,436,503,407,643,446,275,224,357,528,369,751,562,996,629,334,879,591,940,103,770,870,906,880,000,000,000,000,000,000", // 83!
	"3,314,240,134,565,353,266,999,387,579,130,131,288,000,666,286,242,049,487,118,846,032,383,059,131,291,716,864,129,885,722,968,716,753,156,177,920,000,000,000,000,000,000", // 84!
	"281,710,411,438,055,027,694,947,944,226,061,159,480,056,634,330,574,206,405,101,912,752,560,026,159,795,933,451,040,286,452,340,924,018,275,123,200,000,000,000,000,000,000", // 85!
	"24,227,095,383,672,732,381,765,523,203,441,259,715,284,870,552,429,381,750,838,764,496,720,162,249,742,450,276,789,464,634,901,319,465,571,660,595,200,000,000,000,000,000,000", // 86!
	"2,107,757,298,379,527,717,213,600,518,699,389,595,229,783,738,061,356,212,322,972,511,214,654,115,727,593,174,080,683,423,236,414,793,504,734,471,782,400,000,000,000,000,000,000", // 87!
	"185,482,642,257,398,439,114,796,845,645,546,284,380,220,968,949,399,346,684,421,580,986,889,562,184,028,199,319,100,141,244,804,501,828,416,633,516,851,200,000,000,000,000,000,000", // 88!
	"16,507,955,160,908,461,081,216,919,262,453,619,309,839,666,236,496,541,854,913,520,707,833,171,034,378,509,739,399,912,570,787,600,662,729,080,382,999,756,800,000,000,000,000,000,000", // 89!
	"1,485,715,964,481,761,497,309,522,733,620,825,737,885,569,961,284,688,766,942,216,863,704,985,393,094,065,876,545,992,131,370,884,059,645,617,234,469,978,112,000,000,000,000,000,000,000", // 90!
	"135,200,152,767,840,296,255,166,568,759,495,142,147,586,866,476,906,677,791,741,734,597,153,670,771,559,994,765,685,283,954,750,449,427,751,168,336,768,008,192,000,000,000,000,000,000,000", // 91!
	"12,438,414,054,641,307,255,475,324,325,873,553,077,577,991,715,875,414,356,840,239,582,938,137,710,983,519,518,443,046,123,837,041,347,353,107,486,982,656,753,664,000,000,000,000,000,000,000", // 92!
	"1,156,772,507,081,641,574,759,205,162,306,240,436,214,753,229,576,413,535,186,142,281,213,246,807,121,467,315,215,203,289,516,844,845,303,838,996,289,387,078,090,752,000,000,000,000,000,000,000", // 93!
	"108,736,615,665,674,308,027,365,285,256,786,601,004,186,803,580,182,872,307,497,374,434,045,199,869,417,927,630,229,109,214,583,415,458,560,865,651,202,385,340,530,688,000,000,000,000,000,000,000", // 94!
	"10,329,978,488,239,059,262,599,702,099,394,727,095,397,746,340,117,372,869,212,250,571,234,293,987,594,703,124,871,765,375,385,424,468,563,282,236,864,226,607,350,415,360,000,000,000,000,000,000,000", // 95!
	"991,677,934,870,949,689,209,571,401,541,893,801,158,183,648,651,267,795,444,376,054,838,492,222,809,091,499,987,689,476,037,000,748,982,075,094,738,965,754,305,639,874,560,000,000,000,000,000,000,000", // 96!
	"96,192,759,682,482,119,853,328,425,949,563,698,712,343,813,919,172,976,158,104,477,319,333,745,612,481,875,498,805,879,175,589,072,651,261,284,189,679,678,167,647,067,832,320,000,000,000,000,000,000,000", // 97!
	"9,426,890,448,883,247,745,626,185,743,057,242,473,809,693,764,078,951,663,494,238,777,294,707,070,023,223,798,882,976,159,207,729,119,823,605,850,588,608,460,429,412,647,567,360,000,000,000,000,000,000,000", // 98!
	"933,262,154,439,441,526,816,992,388,562,667,004,907,159,682,643,816,214,685,929,638,952,175,999,932,299,156,089,414,639,761,565,182,862,536,979,208,272,237,582,511,852,109,168,640,000,000,000,000,000,000,000", // 99!
	"93,326,215,443,944,152,681,699,238,856,266,700,490,715,968,264,381,621,468,592,963,895,217,599,993,229,915,608,941,463,976,156,518,286,253,697,920,827,223,758,251,185,210,916,864,000,000,000,000,000,000,000,000", // 100!
	"9,425,947,759,838,359,420,851,623,124,482,936,749,562,312,794,702,543,768,327,889,353,416,977,599,316,221,476,503,087,861,591,808,346,911,623,490,003,549,599,583,369,706,302,603,264,000,000,000,000,000,000,000,000", // 101!
	"961,446,671,503,512,660,926,865,558,697,259,548,455,355,905,059,659,464,369,444,714,048,531,715,130,254,590,603,314,961,882,364,451,384,985,595,980,362,059,157,503,710,042,865,532,928,000,000,000,000,000,000,000,000", // 102!
	"99,029,007,164,861,804,075,467,152,545,817,733,490,901,658,221,144,924,830,052,805,546,998,766,658,416,222,832,141,441,073,883,538,492,653,516,385,977,292,093,222,882,134,415,149,891,584,000,000,000,000,000,000,000,000", // 103!
	"10,299,016,745,145,627,623,848,583,864,765,044,283,053,772,454,999,072,182,325,491,776,887,871,732,475,287,174,542,709,871,683,888,003,235,965,704,141,638,377,695,179,741,979,175,588,724,736,000,000,000,000,000,000,000,000", // 104!
	"1,081,396,758,240,290,900,504,101,305,800,329,649,720,646,107,774,902,579,144,176,636,573,226,531,909,905,153,326,984,536,526,808,240,339,776,398,934,872,029,657,993,872,907,813,436,816,097,280,000,000,000,000,000,000,000,000", // 105!
	"114,628,056,373,470,835,453,434,738,414,834,942,870,388,487,424,139,673,389,282,723,476,762,012,382,449,946,252,660,360,871,841,673,476,016,298,287,096,435,143,747,350,528,228,224,302,506,311,680,000,000,000,000,000,000,000,000", // 106!
	"12,265,202,031,961,379,393,517,517,010,387,338,887,131,568,154,382,945,052,653,251,412,013,535,324,922,144,249,034,658,613,287,059,061,933,743,916,719,318,560,380,966,506,520,420,000,368,175,349,760,000,000,000,000,000,000,000,000", // 107!
	"1,324,641,819,451,828,974,499,891,837,121,832,599,810,209,360,673,358,065,686,551,152,497,461,815,091,591,578,895,743,130,235,002,378,688,844,343,005,686,404,521,144,382,704,205,360,039,762,937,774,080,000,000,000,000,000,000,000,000", // 108!
	"144,385,958,320,249,358,220,488,210,246,279,753,379,312,820,313,396,029,159,834,075,622,223,337,844,983,482,099,636,001,195,615,259,277,084,033,387,619,818,092,804,737,714,758,384,244,334,160,217,374,720,000,000,000,000,000,000,000,000", // 109!
	"15,882,455,415,227,429,404,253,703,127,090,772,871,724,410,234,473,563,207,581,748,318,444,567,162,948,183,030,959,960,131,517,678,520,479,243,672,638,179,990,208,521,148,623,422,266,876,757,623,911,219,200,000,000,000,000,000,000,000,000", // 110!
	"1,762,952,551,090,244,663,872,161,047,107,075,788,761,409,536,026,565,516,041,574,063,347,346,955,087,248,316,436,555,574,598,462,315,773,196,047,662,837,978,913,145,847,497,199,871,623,320,096,254,145,331,200,000,000,000,000,000,000,000,000", // 111!
	"197,450,685,722,107,402,353,682,037,275,992,488,341,277,868,034,975,337,796,656,295,094,902,858,969,771,811,440,894,224,355,027,779,366,597,957,338,237,853,638,272,334,919,686,385,621,811,850,780,464,277,094,400,000,000,000,000,000,000,000,000", // 112!
	"22,311,927,486,598,136,465,966,070,212,187,151,182,564,399,087,952,213,171,022,161,345,724,023,063,584,214,692,821,047,352,118,139,068,425,569,179,220,877,461,124,773,845,924,561,575,264,739,138,192,463,311,667,200,000,000,000,000,000,000,000,000", // 113!
	"2,543,559,733,472,187,557,120,132,004,189,335,234,812,341,496,026,552,301,496,526,393,412,538,629,248,600,474,981,599,398,141,467,853,800,514,886,431,180,030,568,224,218,435,400,019,580,180,261,753,940,817,530,060,800,000,000,000,000,000,000,000,000", // 114!
	"292,509,369,349,301,569,068,815,180,481,773,552,003,419,272,043,053,514,672,100,535,242,441,942,363,589,054,622,883,930,786,268,803,187,059,211,939,585,703,515,345,785,120,071,002,251,720,730,101,703,194,015,956,992,000,000,000,000,000,000,000,000,000", // 115!
	"33,931,086,844,518,982,011,982,560,935,885,732,032,396,635,556,994,207,701,963,662,088,123,265,314,176,330,336,254,535,971,207,181,169,698,868,584,991,941,607,780,111,073,928,236,261,199,604,691,797,570,505,851,011,072,000,000,000,000,000,000,000,000,000", // 116!
	"3,969,937,160,808,720,895,401,959,629,498,630,647,790,406,360,168,322,301,129,748,464,310,422,041,758,630,649,341,780,708,631,240,196,854,767,624,444,057,168,110,272,995,649,603,642,560,353,748,940,315,749,184,568,295,424,000,000,000,000,000,000,000,000,000", // 117!
	"468,452,584,975,429,065,657,431,236,280,838,416,439,267,950,499,862,031,533,310,318,788,629,800,927,518,416,622,330,123,618,486,343,228,862,579,684,398,745,837,012,213,486,653,229,822,121,742,374,957,258,403,779,058,860,032,000,000,000,000,000,000,000,000,000", // 118!
	"55,745,857,612,076,058,813,234,317,117,419,771,556,272,886,109,483,581,752,463,927,935,846,946,310,374,691,578,057,284,710,599,874,844,234,646,982,443,450,754,604,453,404,911,734,348,832,487,342,619,913,750,049,708,004,343,808,000,000,000,000,000,000,000,000,000", // 119!
	"6,689,502,913,449,127,057,588,118,054,090,372,586,752,746,333,138,029,810,295,671,352,301,633,557,244,962,989,366,874,165,271,984,981,308,157,637,893,214,090,552,534,408,589,408,121,859,898,481,114,389,650,005,964,960,521,256,960,000,000,000,000,000,000,000,000,000" // 120!
};

#include "cbase.h" // Needed for the Msg command (and other stuff) to work.

// -----------------------------------------------------
// Prints a string from an array of factorial solutions.
// -----------------------------------------------------
void ArrayFactorialFunction(const CCommand& args)
{
	const char* input = args.Arg(1); // String input.
	int i = atoi(input);			 // If possible, convert to integer.

	if (strcmp(input, "0") == 0)
	{
		Msg("%s\n", cc_Factorials[0]); // factorial 0 = 1.
		return;
	}

	if (!i || i < 0)
	{
		Warning("Invalid Input!\n"); // Check for invalid inputs.
		return;
	}

	if (i > 121)
	{
		Warning("Going too high!\n"); // Check to see if the input goes outside of the bounds of the array.
		return;
	}

	Msg("%s\n", cc_Factorials[i]); // If all is good, print the solution to the developer console.
}

// ----------------------------------------------------------------
// This is an example of a ConCommand that passes through an input.
// ----------------------------------------------------------------
static ConCommand arrayfactorial("arrayfactorial", ArrayFactorialFunction, "Performs the factorial of the input value", 0);

// -------------------------------------------------------------------------
// Performs the factorial of a positive integer. May cause integer overflow!
// -------------------------------------------------------------------------
void VariableFactorialFunction(const CCommand& args)
{
	const char* input = args.Arg(1); // String input.
	int i = atoi(input);			 // If possible, convert to integer.

	if (strcmp(input, "0") == 0 || i == 1)
	{
		Msg("1\n"); // 0! = 1! = 1.
		return;
	}

	if (!i || i < 0)
	{
		Warning("Invalid input!\n"); // Check for invalid inputs.
		return;
	}

	uint64 a = 1; // Define a variable for the result to be stored in.
// -------------------------------------------------------------------------------------
// If i is odd, min(i) = 1, if i is even, min(i) = 0. Multiplying by 1 is not necessary.
// The lowest value of i that enters the loop is 2 and if i = 1, exit out of the loop.
// -------------------------------------------------------------------------------------
	for (i; i > 1; i--)
	{
		int z = i * (i - 1); // A local value based off the input.
		a *= z;				 // Perform the multiplication.
		i--;				 // Do an additional subtraction to avoid repeats.
	}
	Msg("%llu\n", a); // Print the result to the developer console. Check console_messages.h for more information.
}

// ----------------------------------------------------------------
// This is an example of a ConCommand that passes through an input.
// ----------------------------------------------------------------
static ConCommand variablefactorial("variablefactorial", VariableFactorialFunction, "Performs the factorial of the input value", 0);
#endif //FACTORIAL_H